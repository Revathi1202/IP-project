from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
import numpy as np

# Sample data for training
data = {
    'age': [23, 45, 35, 50, 29, 60, 22, 40, 33, 55],
    'weight': [60, 75, 68, 80, 65, 85, 55, 78, 70, 90],
    'hemoglobin_level': [14.5, 15.3, 13.8, 16.0, 14.1, 15.8, 13.5, 14.9, 15.2, 16.1],
    'previous_donations': [3, 5, 2, 7, 4, 6, 1, 4, 3, 8],
    'blood_pressure': [120, 130, 115, 140, 118, 135, 110, 125, 132, 145],
    'adverse_reaction': [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]  # Binary target variable (0 for no, 1 for yes)
}

X = np.array([
    [23, 60, 14.5, 3, 120],
    [45, 75, 15.3, 5, 130],
    [35, 68, 13.8, 2, 115],
    [50, 80, 16.0, 7, 140],
    [29, 65, 14.1, 4, 118],
    [60, 85, 15.8, 6, 135],
    [22, 55, 13.5, 1, 110],
    [40, 78, 14.9, 4, 125],
    [33, 70, 15.2, 3, 132],
    [55, 90, 16.1, 8, 145]
])

y = np.array([0, 1, 0, 1, 0, 1, 0, 1, 0, 1])
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train a logistic regression model for demonstration
model = LogisticRegression()
model.fit(X_scaled, y)

def check_thresholds(hemoglobin, blood_pressure):
    warnings = []
    advice = []

    # Hemoglobin level checks
    if hemoglobin < 13.0:
        warnings.append("Your hemoglobin level is low. You might feel nausea or dizziness.")
        advice.append("Advice: Consider eating foods rich in iron, such as spinach, red meat, or legumes.")
    elif hemoglobin > 17.0:
        warnings.append("Your hemoglobin level is high. Consult a physician.")

    # Blood pressure checks
    if blood_pressure < 90:
        warnings.append("Your blood pressure is too low. Risk of fainting.")
        advice.append("Advice: Consider increasing your salt intake and drinking more fluids.")
    elif blood_pressure > 140:
        warnings.append("Your blood pressure is too high. Risk of dizziness or fatigue.")
        advice.append("Advice: Reduce your sodium intake and eat more potassium-rich foods like bananas and oranges.")

    return warnings, advice

def predict_adverse_reactions():
    # Taking user input
    age = int(input("Enter your age: "))
    weight = float(input("Enter your weight (kg): "))
    hemoglobin = float(input("Enter your hemoglobin level (g/dL): "))
    previous_donations = int(input("How many times have you donated blood before? "))
    blood_pressure = float(input("Enter your blood pressure (systolic mmHg): "))

    # Check rule-based thresholds
    rule_warnings, food_advice = check_thresholds(hemoglobin, blood_pressure)

    if rule_warnings:
        print("\nBased on thresholds, here are some warnings:")
        for warning in rule_warnings:
            print("- " + warning)

    if food_advice:
        print("\nFood and lifestyle advice based on your condition:")
        for advice in food_advice:
            print("- " + advice)

# Run the prediction function
if __name__ == "__main__":
    predict_adverse_reactions()
